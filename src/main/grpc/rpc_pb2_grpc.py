# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc_pb2 as rpc__pb2


class OpaqueRPCStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.relayGenerateReport = channel.unary_unary(
                '/rpc.OpaqueRPC/relayGenerateReport',
                request_serializer=rpc__pb2.RARequest.SerializeToString,
                response_deserializer=rpc__pb2.RAReply.FromString,
                )
        self.relayFinishAttestation = channel.unary_unary(
                '/rpc.OpaqueRPC/relayFinishAttestation',
                request_serializer=rpc__pb2.KeyRequest.SerializeToString,
                response_deserializer=rpc__pb2.KeyReply.FromString,
                )
        self.relayQuery = channel.unary_unary(
                '/rpc.OpaqueRPC/relayQuery',
                request_serializer=rpc__pb2.QueryRequest.SerializeToString,
                response_deserializer=rpc__pb2.QueryReply.FromString,
                )


class OpaqueRPCServicer(object):
    """The greeting service definition.
    """

    def relayGenerateReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def relayFinishAttestation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def relayQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OpaqueRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'relayGenerateReport': grpc.unary_unary_rpc_method_handler(
                    servicer.relayGenerateReport,
                    request_deserializer=rpc__pb2.RARequest.FromString,
                    response_serializer=rpc__pb2.RAReply.SerializeToString,
            ),
            'relayFinishAttestation': grpc.unary_unary_rpc_method_handler(
                    servicer.relayFinishAttestation,
                    request_deserializer=rpc__pb2.KeyRequest.FromString,
                    response_serializer=rpc__pb2.KeyReply.SerializeToString,
            ),
            'relayQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.relayQuery,
                    request_deserializer=rpc__pb2.QueryRequest.FromString,
                    response_serializer=rpc__pb2.QueryReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc.OpaqueRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OpaqueRPC(object):
    """The greeting service definition.
    """

    @staticmethod
    def relayGenerateReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.OpaqueRPC/relayGenerateReport',
            rpc__pb2.RARequest.SerializeToString,
            rpc__pb2.RAReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def relayFinishAttestation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.OpaqueRPC/relayFinishAttestation',
            rpc__pb2.KeyRequest.SerializeToString,
            rpc__pb2.KeyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def relayQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.OpaqueRPC/relayQuery',
            rpc__pb2.QueryRequest.SerializeToString,
            rpc__pb2.QueryReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
